/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.biai.writingrecognition;

import java.awt.Image;

import java.awt.image.BufferedImage;
import java.io.File;
import java.util.ArrayList;
import java.util.List;
import javax.imageio.ImageIO;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import org.encog.ml.data.MLData;
import org.encog.ml.data.MLDataSet;
import org.encog.ml.data.basic.BasicMLData;
import org.encog.ml.data.basic.BasicMLDataPair;
import org.encog.ml.data.basic.BasicMLDataSet;
import org.encog.neural.som.SOM;
import org.encog.neural.som.training.clustercopy.SOMClusterCopyTraining;

/**
 *
 * @author m_lig
 */
public class MainFrame extends javax.swing.JFrame {

    private BufferedImage image;
    private DefaultListModel letterListModel = new DefaultListModel();
    private SOM net;

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
        initialise();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        pickFileButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        drawingField1 = new com.biai.writingrecognition.view.DrawingField();
        clearButton = new javax.swing.JButton();
        letterComboBox = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        addButton = new javax.swing.JButton();
        recognizeButton = new javax.swing.JButton();
        downsampledDataJPanel1 = new com.biai.writingrecognition.view.DownsampledDataJPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        lettersList = new javax.swing.JList<>();
        trainButton = new javax.swing.JButton();

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 231, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 80, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        pickFileButton.setText("Load image");
        pickFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pickFileButtonActionPerformed(evt);
            }
        });

        jLabel2.setText("or");

        jLabel3.setText("Draw letter");

        javax.swing.GroupLayout drawingField1Layout = new javax.swing.GroupLayout(drawingField1);
        drawingField1.setLayout(drawingField1Layout);
        drawingField1Layout.setHorizontalGroup(
            drawingField1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 220, Short.MAX_VALUE)
        );
        drawingField1Layout.setVerticalGroup(
            drawingField1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 220, Short.MAX_VALUE)
        );

        clearButton.setText("Clear");
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });

        letterComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z" }));

        jLabel4.setText("Train as");

        addButton.setText("Add");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        recognizeButton.setText(">>");
        recognizeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                recognizeButtonActionPerformed(evt);
            }
        });

        downsampledDataJPanel1.setPreferredSize(new java.awt.Dimension(220, 220));

        javax.swing.GroupLayout downsampledDataJPanel1Layout = new javax.swing.GroupLayout(downsampledDataJPanel1);
        downsampledDataJPanel1.setLayout(downsampledDataJPanel1Layout);
        downsampledDataJPanel1Layout.setHorizontalGroup(
            downsampledDataJPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 220, Short.MAX_VALUE)
        );
        downsampledDataJPanel1Layout.setVerticalGroup(
            downsampledDataJPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 220, Short.MAX_VALUE)
        );

        lettersList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane2.setViewportView(lettersList);

        trainButton.setText("Train");
        trainButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                trainButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(130, 130, 130)
                        .addComponent(clearButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(100, 100, 100)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(pickFileButton, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(60, 60, 60)
                                .addComponent(jLabel2))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(33, 33, 33)
                                .addComponent(jLabel3)))))
                .addContainerGap(612, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(59, 59, 59)
                .addComponent(drawingField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(9, 9, 9)
                                .addComponent(letterComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(7, 7, 7)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4)
                                    .addComponent(recognizeButton)))
                            .addComponent(addButton))
                        .addGap(26, 26, 26))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(trainButton, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)))
                .addComponent(downsampledDataJPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(47, 47, 47)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(19, 19, 19))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 25, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(pickFileButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel3)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(drawingField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(downsampledDataJPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jScrollPane2))
                        .addGap(18, 18, 18)
                        .addComponent(clearButton)
                        .addContainerGap(29, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel4)
                        .addGap(10, 10, 10)
                        .addComponent(letterComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(4, 4, 4)
                        .addComponent(addButton)
                        .addGap(38, 38, 38)
                        .addComponent(recognizeButton)
                        .addGap(31, 31, 31)
                        .addComponent(trainButton)
                        .addGap(85, 85, 85))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void pickFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pickFileButtonActionPerformed
        ReadFile readFile = new ReadFile();
        try {
            image = ImageIO.read(new File(readFile.chooseFile()));
            ImageIcon icon = new ImageIcon();
            icon.setImage(image);
            Image image1 = icon.getImage();
            image1 = image1.getScaledInstance(this.getHeight(), this.getHeight(), Image.SCALE_SMOOTH);
            drawingField1.setImage(image1);
        } catch (Exception e) {

        }
    }//GEN-LAST:event_pickFileButtonActionPerformed

    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed
        drawingField1.clearImage();
    }//GEN-LAST:event_clearButtonActionPerformed

    char[] mapNeurons() {
        char map[] = new char[letterListModel.size()];

        for (int i = 0; i < map.length; i++) {
            map[i] = '?';
        }
        for (int i = 0; i < letterListModel.size(); i++) {
            final MLData input = new BasicMLData(Config.DOWNSAMPLE_HEIGHT * Config.DOWNSAMPLE_WIDTH);
            int idx = 0;
            final DownsampledData ds = (DownsampledData) letterListModel
                    .getElementAt(i);
            for (int y = 0; y < ds.getHeight(); y++) {
                for (int x = 0; x < ds.getWidth(); x++) {
                    input.setData(idx++, ds.getDataForPixel(x, y) ? .5 : -.5);
                }
            }

            int best = net.classify(input);
            map[best] = ds.getLetter();
        }
        return map;
    }
    private void recognizeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_recognizeButtonActionPerformed
        if (net == null) {
            JOptionPane.showMessageDialog(this, "I need to be trained first!",
                    "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        drawingField1.downSample();

        final MLData input = new BasicMLData(Config.DOWNSAMPLE_HEIGHT * Config.DOWNSAMPLE_WIDTH);
        int idx = 0;
        final DownsampledData downsampledData = this.downsampledDataJPanel1.getDownsampledData();
        for (int y = 0; y < downsampledData.getHeight(); y++) {
            for (int x = 0; x < downsampledData.getWidth(); x++) {
                input.setData(idx++, downsampledData.getDataForPixel(x, y) ? .5 : -.5);
            }
        }

        final int best = this.net.classify(input);
        final char map[] = mapNeurons();
        JOptionPane
                .showMessageDialog(this, "  " + map[best] + "   (Neuron #"
                        + best + " fired)", "That Letter Is",
                        JOptionPane.PLAIN_MESSAGE);
    }//GEN-LAST:event_recognizeButtonActionPerformed

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        int i;

        final String letter = (String) letterComboBox.getSelectedItem();
        if (letter == null) {
            return;
        }

        drawingField1.downSample();
        DownsampledData downsampledData = (DownsampledData) downsampledDataJPanel1.getDownsampledData().clone();

        downsampledData.setLetter(letter.charAt(0));

        for (i = 0; i < letterListModel.size(); i++) {
            final Comparable str = (Comparable) letterListModel
                    .getElementAt(i);
            if (str.equals(letter)) {
                JOptionPane.showMessageDialog(this,
                        "That letter is already defined, delete it first!",
                        "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            if (str.compareTo(downsampledData) > 0) {

                letterListModel.add(i, downsampledData);
                return;
            }
        }
        letterListModel.add(this.letterListModel.size(), downsampledData);
        lettersList.setSelectedIndex(i);

        //this.letters.setSelectedIndex(i);
        downsampledDataJPanel1.repaint();

    }//GEN-LAST:event_addButtonActionPerformed

    private void trainButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_trainButtonActionPerformed
        train();
    }//GEN-LAST:event_trainButtonActionPerformed

    void onLetterSelected(ListSelectionEvent event) {
        if (lettersList.getSelectedIndex() == -1) {
            return;
        }
        final DownsampledData selectedItem = (DownsampledData) letterListModel
                .getElementAt(lettersList.getSelectedIndex());
        downsampledDataJPanel1.setData((DownsampledData) selectedItem.clone());
        downsampledDataJPanel1.repaint();

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JButton clearButton;
    private com.biai.writingrecognition.view.DownsampledDataJPanel downsampledDataJPanel1;
    private com.biai.writingrecognition.view.DrawingField drawingField1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JComboBox<String> letterComboBox;
    private javax.swing.JList<String> lettersList;
    private javax.swing.JButton pickFileButton;
    private javax.swing.JButton recognizeButton;
    private javax.swing.JButton trainButton;
    // End of variables declaration//GEN-END:variables

    private void initialise() {
        drawingField1.setDownsampledDataJPanel(downsampledDataJPanel1);
        lettersList.setModel(letterListModel);
        lettersList.addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                onLetterSelected(e);
            }

        });
    }

    private void train() {
        try {
            final int inputNeuron = Config.DOWNSAMPLE_HEIGHT
                    * Config.DOWNSAMPLE_WIDTH;
            final int outputNeuron = letterListModel.size();

            final MLDataSet trainingSet = new BasicMLDataSet();
            for (int i = 0; i < letterListModel.size(); i++) {
                final MLData item = new BasicMLData(inputNeuron);
                int idx = 0;
                final DownsampledData downsampledData = (DownsampledData) this.letterListModel
                        .getElementAt(i);
                for (int y = 0; y < downsampledData.getHeight(); y++) {
                    for (int x = 0; x < downsampledData.getWidth(); x++) {
                        item.setData(idx++, downsampledData.getDataForPixel(x, y) ? .5 : -.5);
                    }
                }

                trainingSet.add(new BasicMLDataPair(item, null));
            }

            net = new SOM(inputNeuron, outputNeuron);
            net.reset();

            SOMClusterCopyTraining train = new SOMClusterCopyTraining(net, trainingSet);

            train.iteration();

            JOptionPane.showMessageDialog(this, "Training has completed.",
                    "Training", JOptionPane.PLAIN_MESSAGE);

        } catch (final Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error: " + e, "Training",
                    JOptionPane.ERROR_MESSAGE);
        }
    }
}
